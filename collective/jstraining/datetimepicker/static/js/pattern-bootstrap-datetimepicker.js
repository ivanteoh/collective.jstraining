/* DateTimePicker pattern.
 *
 * Options:
 *    date(object): Date widget options described here. If false is selected date picker wont be shown. ({{selectYears: true, selectMonths: true })
 *    time(object): Time widget options described here. If false is selected time picker wont be shown. ({})
 *    today(String/Boolean): Title text for today button. Set to a falsy value to hide the button ("Today").
 *    clear(String/Boolean): Title text for the clear button. Set to a falsy value to hide the button ("Clear").
 *    autoSetTimeOnDateChange(string): Automatically set the time when a date is set. You can specify an offset with a special syntax - a stringified JSON Array in the form of "[H,M]" will set it to hour:minute. If you prepend an "+" or "-", this will added or subscracted to the current time. It does not go beyond 12:00am. ("+[0,0]").
 *    separator(string): Separator between date and time if both are enabled.
 *    (' ')
 *    classClearName(string): Class applied to clear button. ('pattern-pickadate-clear')
 *    classDateName(string): Class applied to date input. ('pattern-pickadate-date')
 *    classDateWrapperName(string): Class applied to extra wrapper div around date input. ('pattern-pickadate-date-wrapper')
 *    classNowName(string): Class applied to now button. ('pattern-pickadate-now')
 *    classSeparatorName(string): Class applied to separator. ('pattern-pickadate-separator')
 *    classTimeName(string): Class applied to time input. ('pattern-pickadate-time')
 *    classTimeWrapperName(string): Class applied to wrapper div around time input. ('pattern-pickadate-time-wrapper')
 *    classTimezoneName(string): Class applied to timezone input. ('pattern-pickadate-timezone')
 *    classTimezoneWrapperName(string): Class applied to wrapper div around timezone input. ('pattern-pickadate-timezone-wrapper')
 *    classWrapperName(string): Class name of element that is generated by pattern. ('pattern-pickadate-wrapper')
 *
 * Documentation:
 *    # Date and Time
 *
 *    {{ example-1 }}
 *
 *    # Date and Time with initial data
 *
 *    {{ example-2 }}
 *
 *    # Date
 *
 *    {{ example-3 }}
 *
 *    # Date with initial date
 *
 *    {{ example-4 }}
 *
 *    # Time
 *
 *    {{ example-5 }}
 *
 *    # Time with initial time
 *
 *    {{ example-6 }}
 *
 *    # Date and time with timezone
 *
 *    {{ example-7 }}
 *
 *    # Date and time with timezone and default value
 *
 *    {{ example-8 }}
 *
 *    # Date and time with one timezone and no today and clear buttons
 *
 *    {{ example-9 }}
 *
 * Example: example-1
 *    <input class="pat-pickadate"/>
 *
 * Example: example-2
 *    <input class="pat-pickadate" value="2010-12-31 00:45" />
 *
 * Example: example-3
 *    <input class="pat-pickadate" data-pat-pickadate="time:false"/>
 *
 * Example: example-4
 *    <input class="pat-pickadate" value="2010-12-31" data-pat-pickadate="time:false"/>
 *
 * Example: example-5
 *    <input class="pat-pickadate" data-pat-pickadate="date:false"/>
 *
 * Example: example-6
 *    <input class="pat-pickadate" value="00:00" data-pat-pickadate="date:false"/>
 *
 * Example: example-7
 *    <input class="pat-pickadate" data-pat-pickadate='{"timezone": {"data": [{"id":"Europe/Berlin","text":"Europe/Berlin"},{"id":"Europe/Vienna","text":"Europe/Vienna"}]}}'/>
 *
 * Example: example-8
 *    <input class="pat-pickadate" data-pat-pickadate='{"timezone": {"default": "Europe/Vienna", "data": [{"id":"Europe/Berlin","text":"Europe/Berlin"},{"id":"Europe/Vienna","text":"Europe/Vienna"}]}}'/>
 *
 * Example: example-9
 *    <input class="pat-pickadate" data-pat-pickadate='{"timezone": {"data": [{"id":"Europe/Berlin","text":"Europe/Berlin"}]}, "today": false, "clear": false}'/>
 *
 */

require([
  'jquery',
  'pat-base',
  'mockup-utils',
  'translate',
  'bootstrap-datetimepicker'
], function($, Base, utils, _t) {
    'use strict';

    var DateTimePicker = Base.extend({
      name: 'pattern-bootstrap-datetimepicker',
      trigger: '.pat-pattern-bootstrap-datetimepicker',  // has to be exact like this: 'pat-' + patternname.
      parser: 'mockup',
      defaults: {                      // default options
        separator: ' ',
        date: {
          selectYears: true,
          selectMonths: true,
          formatSubmit: 'yyyy-mm-dd',
          format: 'yyyy-mm-dd',
          labelMonthNext: _t('Next month'),
          labelMonthPrev: _t('Previous month'),
          labelMonthSelect: _t('Select a month'),
          labelYearSelect: _t('Select a year'),
          // hide buttons
          clear: false,
          close: false,
          today: false
        },
        time: {
          clear: false  // hide button
        },
        today: _t('Today'),
        clear: _t('Clear'),
        timezone: null,
        autoSetTimeOnDateChange: '+[0,0]',
        classWrapperName: 'pattern-pickadate-wrapper',
        classSeparatorName: 'pattern-pickadate-separator',
        classDateName: 'pattern-pickadate-date',
        classDateWrapperName: 'pattern-pickadate-date-wrapper',
        classTimeName: 'pattern-pickadate-time',
        classTimeWrapperName: 'pattern-pickadate-time-wrapper',
        classTimezoneName: 'pattern-pickadate-timezone',
        classTimezoneWrapperName: 'pattern-pickadate-timezone-wrapper',
        classClearName: 'pattern-pickadate-clear',
        classNowName: 'pattern-pickadate-now',
        placeholderDate: _t('Enter date...'),
        placeholderTime: _t('Enter time...'),
        placeholderTimezone: _t('Enter timezone...')
      },
      parseTimeOffset: function(timeOffset) {
        var op = undefined;
        return [0,0];
      },
      init: function () {
        // pattern initialization. called for each matching pattern.
        var that = this;
        that.$el.datetimepicker();
      },
      updateValue: function() {
        var self = this,
            value = '';

        self.$el.val(value);

        self.emit('updated');
      }
    });

    return DateTimePicker;
});
